{"remainingRequest":"/home/sena/Desktop/front-carService/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sena/Desktop/front-carService/src/views/base/Tabs.vue?vue&type=template&id=bf46951c&","dependencies":[{"path":"/home/sena/Desktop/front-carService/src/views/base/Tabs.vue","mtime":1616347706732},{"path":"/home/sena/Desktop/front-carService/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sena/Desktop/front-carService/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/sena/Desktop/front-carService/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sena/Desktop/front-carService/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}